'use strict'
/* global before after describe it */

var lib = require('../../')
var should = require('should')
var sinon = require('sinon')
var MongoClient = require('mongodb').MongoClient
var ObjectId = require('mongodb').ObjectID

var db
var collection

var User

var random = Math.random()
var _id = new ObjectId('52d3bca3e25e47fc2d860000')
var _id2 = new ObjectId('52d3bca3e25e47fc2d860300')
var uri = 'mongodb://localhost/mong-test2'

describe('Model', function () {
  before(function (done) {
    MongoClient.connect(uri, function (err, _db) {
      if (err) return done(err)
      collection = _db.collection('users')
      should.exist(collection)
      collection.insert({_id: _id, random: random}, function () {
        collection.insert({_id: _id2, random: Math.random()}, function () {
          _db.close(done)
        })
      })
    })
  })

  before(function (done) {
    db = lib.create(uri)
    User = db.model('users')

    User.ensureIndex({name: 1})
    db
    .on('error', done)
    .on('connect', function () {
      done()
    })
  })

  after(function () {
    return db.disconnect()
  })

  describe('.find', function () {
    it('should find the objects already in the collection', function (done) {
      var expectation = sinon.mock()
      expectation.once()

      User.stream({_id: _id})
      .on('data', expectation)
      .on('end', function () {
        if (!expectation.firstCall.args[0]._id.equals(_id)) throw new Error('Wrong _id')
        expectation.verify()
        done()
      })
    })

    it('should support promises', function () {
      return User.find()
      .then()
    })

    it('should support providing promises', function () {
      User.find({}, {}, {sort: {_id: -1}})
      .then(function (docs) {
        docs.should.be.an.instanceOf(Array)
      })
    })
  })

  describe('.findOne', function () {
    it('should support promises', function () {
      return User.findOne({_id: _id})
    })
  })

  describe('.findById', function () {
    it('should support promises', function () {
      return User.findById(_id)
    })
  })

  describe('.update', function () {
    it('should support promises', function () {
      return User.update({_id: _id}, {$set: {list: [1, 2, 3]}})
    })
  })

  describe('.remove', function () {
    it('should support promises', function () {
      return User.remove({none: 'match'})
    })
  })

  describe('.findAndModify', function () {
    it('should support callbacks', function () {
      return User.findAndModify({xyz: 123}, {}, {$set: {z: -4}})
    })
  })

  describe('.aggregate', function () {
    it('should support callbacks', function () {
      return User.aggregate([{$group: {_id: null}}])
    })
    it('should support streams', function (done) {
      var expectation = sinon.mock()
      expectation.once()
      User.aggregateStream([{$group: {_id: null}}])
      .on('data', expectation)
      .on('end', done)
    })
  })
})
