'use strict'

var MongoClient = require('mongodb').MongoClient
var EventEmitter = require('events').EventEmitter
var inherits = require('util').inherits
var ObjectId = require('mongodb').ObjectID

var Document = require('./model')

var DB = Symbol('dbPromise')
var PROMISE_COLLECTION = Symbol('dbCollection')

function pluralize (constructorName) {
  return constructorName.toLowerCase() + 's'
}

module.exports = Connection

inherits(Connection, EventEmitter)

function Connection (uri) {
  EventEmitter.call(this)
  var conn = this

  inherits(ConnectedDocument, Document)
  function ConnectedDocument (o) {
    Document.call(this, o)
  }

  // Mixin static methods:
  Object.keys(Document)
  .forEach(function (staticMethodName) {
    ConnectedDocument[staticMethodName] = Document[staticMethodName]
  })

  var dbPromise = new Promise(function (resolve, reject) {
    conn.once('connect', function () {
      resolve(conn[DB])
    })
  })

  ConnectedDocument.getCollection = function () {
    var p = ConnectedDocument[PROMISE_COLLECTION]
    if (p) return p
    var self = this
    p = dbPromise
    .then(function (db) {
      var collectionName = self.collection
      if (typeof collectionName === 'function') collectionName = collectionName()
      if (typeof collectionName !== 'string') collectionName = pluralize(self.name)
      return db.collection(collectionName)
    })

    ConnectedDocument[PROMISE_COLLECTION] = p

    return p
  }

  this.Document = ConnectedDocument
  this.Model = ConnectedDocument

  if (uri) {
    connect.call(this, uri)
  }
}

Connection.prototype.model = function (collectionName) {
  var ConnectedDocument = this.Document

  var ctor = function (o) {
    ConnectedDocument.call(this, o)
  }
  inherits(ctor, ConnectedDocument)

  // Mixin static methods:
  Object.keys(ConnectedDocument)
  .forEach(function (staticMethodName) {
    ctor[staticMethodName] = ConnectedDocument[staticMethodName]
  })

  ctor.collection = function () {
    return collectionName
  }

  return ctor
}

Connection.prototype.ObjectId = ObjectId

Connection.prototype.connect = connect

function connect (uri) {
  this.connect = function connectionAlreadyOpen () {
    throw new Error('Connection already open.')
  }
  var options = {
    db: {
      'native_parser': true
    }
  }

  var conn = this

  var p = MongoClient.connect(uri, options)

  p.then(
    function (db) {
      conn[DB] = db
      conn.emit('connect')
    },
    function (err) { conn.emit('error', err) }
  )

  return p
}

Connection.prototype.disconnect = function () {
  return this[DB].close()
}
